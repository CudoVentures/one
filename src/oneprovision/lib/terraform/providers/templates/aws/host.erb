data "aws_availability_zones" "available" {}

# only filter availability zones where given instance could be deployed
data "aws_ec2_instance_type_offerings" "available" {

    for_each=toset(data.aws_availability_zones.available.names)

    filter {
        name   = "instance-type"
        values = ["<%= provision['INSTANCETYPE'] %>"]
    }

    filter {
        name   = "location"
        values = ["${each.key}"]
    }

    location_type = "availability-zone"
}

locals {
    my_zones = keys({ for az, details in data.aws_ec2_instance_type_offerings.available :
                      az => details.instance_types if length(details.instance_types) != 0 })
}


resource "aws_instance" "device_<%= obj['ID'] %>" {
    ami                    = "<%= provision['AMI'] %>"
    instance_type          = "<%= provision['INSTANCETYPE'] %>"
    availability_zone      = local.my_zones[0]

    vpc_security_group_ids = [ aws_security_group.device_<%= c['ID'] %>_all.id ]

    subnet_id              = aws_subnet.device_<%= c['ID'] %>.id

    <% ecidr = c['TEMPLATE']['PROVISION']['CIDR'] || "10.0.0.0/16"
       pref = ecidr.split('/').first.rpartition(".")[0]
       ip = pref << '.' << ( provision['INDEX'].to_i + 4 ).to_s
    %>

    private_ip = "<%= ip %>"

    user_data              = "<%= obj['user_data'] %>"
    tags                   = {
        Name = "<%= provision['HOSTNAME'] %>"
    }
}

output "ip_<%= obj['ID'] %>" {
  value = aws_instance.device_<%= obj['ID'] %>.public_ip
}

output "device_id_<%= obj['ID'] %>" {
  value = aws_instance.device_<%= obj['ID'] %>.id
}

