#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2021, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# cpds host:remote_system_dir/disk.0 source snapid vmid dsid
#   - host where the VM is deployed
#   - remote_system_ds is the path for the system datastore in the host
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/IMG_HASH
#   - snapid is the snapshot id. "-1" for none

SRC=$1
DST=$2
SNAP_ID=$3
VM_ID=$4
DS_ID=$5

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

DRIVER_PATH=$(dirname $0)

source $TMCOMMON
source ${DRIVER_PATH}/../../etc/tm/fs_lvm/fs_lvm.conf

#-------------------------------------------------------------------------------
# Set dst path and dir
#-------------------------------------------------------------------------------
SRC_PATH=`arg_path $SRC`
SRC_HOST=`arg_host $SRC`

DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`

DISK_ID=$(echo $SRC_PATH|$AWK -F. '{print $NF}')
DS_SYS_ID=$(echo $SRC_PATH|$AWK -F/ '{print $(NF-2)}')

LV_NAME="lv-one-$VM_ID-$DISK_ID"
VG_NAME="vg-one-$DS_SYS_ID"

DEV="/dev/${VG_NAME}/${LV_NAME}"

#-------------------------------------------------------------------------------
# Get VM information
#-------------------------------------------------------------------------------
XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VM_ID| $XPATH \
                    '/VM/LCM_STATE' \
                    '/VM/HISTORY_RECORDS/HISTORY[last()]/HOSTNAME')

LCM_STATE="${XPATH_ELEMENTS[j++]}"
LAST_HOST="${XPATH_ELEMENTS[j++]}"

# HOTPLUG_SAVEAS_UNDEPLOYED || HOTPLUG_SAVEAS_STOPPED (i.e VM not present in HV node)
if [ "$LCM_STATE" = '67' ] || [ "$LCM_STATE" = '68' ]; then

    # get BRIDGE_LIST from datastore
    IFS= read -r -d '' BRIDGE_LIST < <(onedatastore show -x $DS_SYS_ID \
        | $XPATH /DATASTORE/TEMPLATE/BRIDGE_LIST )

    if [ -n "$BRIDGE_LIST" ]; then
        SRC_HOST=$(get_destination_host)
    elif [ -n "$LAST_HOST" ]; then
        SRC_HOST=$LAST_HOST
    else
        log_error "Unknown last VM host nor BRIDGE_LIST"
        exit -1
    fi
    ACTIVATE="$SUDO $LVCHANGE -ay $DEV > /dev/null 2>&1"
    DEACTIVATE="$SUDO $LVCHANGE -an $DEV > /dev/null 2>&1"
fi

#-------------------------------------------------------------------------------
# Move the image back to the datastore
#-------------------------------------------------------------------------------

log "Dumping $SRC to $DST"

# Copy from possibly remote host to possible remote host
if [ "$(fix_dir_slashes $DST_HOST)" != "$DST_PATH" ]; then
    # TODO, this branch is not used. Remove it or leave just in case?
    DUMP_CMD=$(cat <<EOF
        set -e -o pipefail
        $ACTIVATE
        $DD if=\"$DEV\" bs=${DD_BLOCK_SIZE:-64k} conv=sparse | $SSH "$DST_HOST" "cat - > $DST_PATH"
        $DEACTIVATE

EOF
)
    ssh_forward ssh_exec_and_log "$SRC_HOST" "$DUMP_CMD" "Error dumping $SRC to $DST"
else # Copy from possibly remote host to local
    DUMP_CMD=$(cat <<EOF

        if [ -n "$ACTIVATE" ]; then
            $SSH "$SRC_HOST" "$ACTIVATE; $DD if=\"$DEV\" bs=${DD_BLOCK_SIZE:-64k} conv=sparse; $DEACTIVATE" | \
            cat - > "$DST_PATH"
        else
            $SSH "$SRC_HOST" "$DD if=\"$DEV\" bs=${DD_BLOCK_SIZE:-64k} conv=sparse" | cat - > "$DST_PATH"
        fi
EOF
)

    multiline_exec_and_log "$DUMP_CMD" "Error dumping $SRC to $DST"
fi

exit 0
