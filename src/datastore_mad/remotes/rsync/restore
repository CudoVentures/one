#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2023, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #
ONE_LOCATION = ENV['ONE_LOCATION']

if !ONE_LOCATION
    RUBY_LIB_LOCATION = '/usr/lib/one/ruby'
    GEMS_LOCATION     = '/usr/share/one/gems'
    VMDIR             = '/var/lib/one'
    CONFIG_FILE       = '/var/lib/one/config'

    VAR_LOCATION      = '/var/lib/one'
else
    RUBY_LIB_LOCATION = ONE_LOCATION + '/lib/ruby'
    GEMS_LOCATION     = ONE_LOCATION + '/share/gems'
    VMDIR             = ONE_LOCATION + '/var'
    CONFIG_FILE       = ONE_LOCATION + '/var/config'

    VAR_LOCATION      = ONE_LOCATION + '/var'
end

SERVERADMIN_AUTH = VAR_LOCATION + '/.one/onegate_auth'

# %%RUBYGEMS_SETUP_BEGIN%%
if File.directory?(GEMS_LOCATION)
    real_gems_path = File.realpath(GEMS_LOCATION)
    if !defined?(Gem) || Gem.path != [real_gems_path]
        $LOAD_PATH.reject! {|l| l =~ /vendor_ruby/ }

        # Suppress warnings from Rubygems
        # https://github.com/OpenNebula/one/issues/5379
        begin
            verb = $VERBOSE
            $VERBOSE = nil
            require 'rubygems'
            Gem.use_paths(real_gems_path)
        ensure
            $VERBOSE = verb
        end
    end
end
# %%RUBYGEMS_SETUP_END%%

$LOAD_PATH << RUBY_LIB_LOCATION

require 'base64'

require 'CommandManager'
require 'rexml/document'
require 'opennebula'
require 'opennebula/server_cipher_auth'

require_relative '../../tm/lib/backup'
require_relative '../../tm/lib/tm_action'

# ------------------------------------------------------------------------------
# Get backup information:
#   - vm.xml description
#   - list of disks in the backup
# ------------------------------------------------------------------------------
drv_action  = Base64.decode64(ARGV[0])
_request_id = ARGV[1]

rds = REXML::Document.new(drv_action).root

begin
    buid = rds.elements['IMAGE/SOURCE'].text
    iid  = rds.elements['IMAGE/ID'].text.to_i
    dsid = rds.elements['DATASTORE/ID'].text.to_i
    base = rds.elements['DATASTORE/BASE_PATH'].text

    rsync_host = rds.elements['DATASTORE/TEMPLATE/RSYNC_HOST'].text
    rsync_user = rds.elements['DATASTORE/TEMPLATE/RSYNC_USER'].text

    vm_id = rds.elements['IMAGE/VMS[1]/ID'].text.to_i
    image = TransferManager::BackupImage.new(drv_action)
rescue StandardError => e
    STDERR.puts "Missing datastore or image attributes: #{e.message}"
    exit(1)
end

begin
    username  = rds.elements['TEMPLATE/USERNAME'].text
    dst_ds_id = rds.elements['DESTINATION_DS_ID'].text.to_i
rescue StandardError
    STDERR.puts 'Cannot find USERNAME / DESTINATION_DS_ID'
    exit(1)
end

bk_path = "#{base}/#{vm_id}/#{buid}"

rc = TransferManager::Action.ssh('list_bkp_files',
                                 :host     => "#{rsync_user}@#{rsync_host}",
                                 :cmds     => "ls -d #{bk_path}/*",
                                 :nostdout => false)
if rc.code != 0
    STDERR.puts rc.stderr
    exit(1)
end

disks       = []
vm_xml_path = ''

rc.stdout.each_line do |l|
    l.delete('"').strip!

    disks << l if l.match(/disk\.[0-9]+\.[0-9]+$/)
    vm_xml_path = l if l.match(/vm\.xml$/)
end

if disks.empty? || vm_xml_path.empty?
    STDERR.puts 'Backup does not contain any disk or missing vm.xml'
    exit(1)
end

rc = TransferManager::Action.ssh('gather_vm_xml',
                                 :host     => "#{rsync_user}@#{rsync_host}",
                                 :cmds     => "cat #{vm_xml_path}",
                                 :nostdout => false)
if rc.code != 0
    STDERR.puts rc.stderr
    exit(1)
end

vm_xml = rc.stdout

# ------------------------------------------------------------------------------
# Prepare an OpenNebula client to impersonate the target user
# ------------------------------------------------------------------------------
ENV['ONE_CIPHER_AUTH'] = SERVERADMIN_AUTH

sauth = OpenNebula::ServerCipherAuth.new_client
token = sauth.login_token(Time.now.to_i + 120, username)

one_client = OpenNebula::Client.new(token)

# ------------------------------------------------------------------------------
# Create backup object templates for VM and associated disk images
# Monkey patch REXML::DOCUMENT to respond to []
# ------------------------------------------------------------------------------
rds.define_singleton_method('[]') {|xpath| elements[xpath].text }

restorer = TransferManager::BackupRestore.new(
    :vm_xml64  => vm_xml,
    :backup_id => buid,
    :bimage    => image,
    :ds_id     => dsid,
    :image_id  => iid,
    :txml      => rds,
    :proto     => 'rsync'
)

br_disks = restorer.disk_images(disks)

one_error = ''
images    = []

# Create disk images
br_disks.each do |_id, disk|
    # Fix image name - maybe not necessary any longer
    # disk[:template].gsub!(%r{(NAME = "[0-9]+-)[0-9]+/}, '\1')
    image = OpenNebula::Image.new(OpenNebula::Image.build_xml, one_client)
    rc    = image.allocate(disk[:template], dst_ds_id)

    if OpenNebula.is_error?(rc)
        one_error = rc.message
        break
    end

    disk[:image_id] = image.id
    images << image.id
end

if !one_error.empty?
    message = "Error restoring disk image: #{one_error}"

    if !images.empty?
        message << " The following images were restored: #{images.join(' ')}"
    end

    STDERR.puts message
    exit(1)
end

# Create VM template
vm_template = restorer.vm_template(br_disks)

# Fix template name (maybe not necessary any longer)
# vm_template.gsub!(%r{(NAME= "[0-9]+-)[0-9]+/}, '\1')

tmpl = OpenNebula::Template.new(OpenNebula::Template.build_xml, one_client)
rc   = tmpl.allocate(vm_template)

if OpenNebula.is_error?(rc)
    message = "Error creating VM template: #{rc.message}"

    if !images.empty?
        message << " The following images were restored: #{images.join(' ')}"
    end

    STDERR.puts message
    exit(1)
end

STDOUT.puts "#{tmpl.id} #{images.join(' ')}"

exit(0)
